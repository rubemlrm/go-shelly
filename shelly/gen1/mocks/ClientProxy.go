// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	retryablehttp "github.com/hashicorp/go-retryablehttp"
	mock "github.com/stretchr/testify/mock"
)

// ClientProxy is an autogenerated mock type for the ClientProxy type
type ClientProxy struct {
	mock.Mock
}

// Do provides a mock function with given fields: req
func (_m *ClientProxy) Do(req *retryablehttp.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*retryablehttp.Request) (*http.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*retryablehttp.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*retryablehttp.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientProxy creates a new instance of ClientProxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientProxy(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientProxy {
	mock := &ClientProxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
