// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	contracts "github.com/rubemlrm/go-shelly/shelly/gen1/contracts"

	mock "github.com/stretchr/testify/mock"

	retryablehttp "github.com/hashicorp/go-retryablehttp"
)

// ShellyClient is an autogenerated mock type for the ShellyClient type
type ShellyClient struct {
	mock.Mock
}

// Do provides a mock function with given fields: req, v
func (_m *ShellyClient) Do(req *retryablehttp.Request, v interface{}) (*contracts.Response, error) {
	ret := _m.Called(req, v)

	var r0 *contracts.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*retryablehttp.Request, interface{}) (*contracts.Response, error)); ok {
		return rf(req, v)
	}
	if rf, ok := ret.Get(0).(func(*retryablehttp.Request, interface{}) *contracts.Response); ok {
		r0 = rf(req, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*retryablehttp.Request, interface{}) error); ok {
		r1 = rf(req, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRequest provides a mock function with given fields: method, endpoint, opts
func (_m *ShellyClient) NewRequest(method string, endpoint string, opts interface{}) (*retryablehttp.Request, error) {
	ret := _m.Called(method, endpoint, opts)

	var r0 *retryablehttp.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (*retryablehttp.Request, error)); ok {
		return rf(method, endpoint, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) *retryablehttp.Request); ok {
		r0 = rf(method, endpoint, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*retryablehttp.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(method, endpoint, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUrl provides a mock function with given fields: method, endpoint, opts
func (_m *ShellyClient) ParseUrl(method string, endpoint string, opts interface{}) (string, error) {
	ret := _m.Called(method, endpoint, opts)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (string, error)); ok {
		return rf(method, endpoint, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) string); ok {
		r0 = rf(method, endpoint, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(method, endpoint, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryHTTPCheck provides a mock function with given fields: ctx, resp, err
func (_m *ShellyClient) RetryHTTPCheck(ctx context.Context, resp *http.Response, err error) (bool, error) {
	ret := _m.Called(ctx, resp, err)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Response, error) (bool, error)); ok {
		return rf(ctx, resp, err)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Response, error) bool); ok {
		r0 = rf(ctx, resp, err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Response, error) error); ok {
		r1 = rf(ctx, resp, err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAdditionalHeaders provides a mock function with given fields: request, headers
func (_m *ShellyClient) SetAdditionalHeaders(request *retryablehttp.Request, headers http.Header) {
	_m.Called(request, headers)
}

// SetBasicAuth provides a mock function with given fields: request
func (_m *ShellyClient) SetBasicAuth(request *retryablehttp.Request) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*retryablehttp.Request) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewShellyClient creates a new instance of ShellyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShellyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShellyClient {
	mock := &ShellyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
